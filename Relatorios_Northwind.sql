-- 1. Relatório de Receita/Faturamento total
-- SELECT 
--     SUM(od.quantity * od.unit_price * (1.0 - od.discount)) AS total_revenues_1997
-- FROM 
--     orders o
-- JOIN 
--     order_details od ON o.order_id = od.order_id
-- WHERE 
--     EXTRACT(YEAR FROM o.order_date) = 1997;


-- 2. Análise de crescimento mensal e cálculo YTD
-- WITH monthly_sales AS (
--     SELECT 
--         DATE_TRUNC('month', o.order_date) AS month,
--         SUM(od.quantity * od.unit_price) AS monthly_total
--     FROM 
--         orders o
--     JOIN 
--         order_details od ON o.order_id = od.order_id
--     GROUP BY 
--         DATE_TRUNC('month', o.order_date)
-- ),
-- cumulative_sales AS (
--     SELECT 
--         month,
--         monthly_total,
--         SUM(monthly_total) OVER (ORDER BY month) AS ytd_total
--     FROM 
--         monthly_sales
-- )
-- SELECT 
--     month,
--     monthly_total,
--     LAG(monthly_total) OVER (ORDER BY month) AS previous_month_total,
--     (monthly_total - LAG(monthly_total) OVER (ORDER BY month)) / NULLIF(LAG(monthly_total) OVER (ORDER BY month), 0) AS monthly_growth,
--     ytd_total
-- FROM 
--     cumulative_sales
-- ORDER BY 
--     month;

-- Segmentação de clientes:
-- Qual o valor total que cada cliente pagou até agora?
-- SELECT 
--     customers.company_name, 
--     SUM(order_details.unit_price * order_details.quantity * (1.0 - order_details.discount)) AS total
-- FROM 
--     customers
-- INNER JOIN 
--     orders ON customers.customer_id = orders.customer_id
-- INNER JOIN 
--     order_details ON order_details.order_id = orders.order_id
-- GROUP BY 
--     customers.company_name
-- ORDER BY 
--     total DESC;


-- Separar os clientes em 5 grupos de acordo com o valor pago por cliente
-- SELECT 
-- customers.company_name, 
-- SUM(order_details.unit_price * order_details.quantity * (1.0 - order_details.discount)) AS total,
-- NTILE(5) OVER (ORDER BY SUM(order_details.unit_price * order_details.quantity * (1.0 - order_details.discount)) DESC) AS group_number
-- FROM 
--     customers
-- INNER JOIN 
--     orders ON customers.customer_id = orders.customer_id
-- INNER JOIN 
--     order_details ON order_details.order_id = orders.order_id
-- GROUP BY 
--     customers.company_name
-- ORDER BY 
--     total DESC;

-- Separar apenas os clientes que estão no grupo 3, 4 e 5 
-- para que seja feita uma análise de Marketing especial.
-- WITH clientes_para_marketing AS (
--     SELECT 
--     customers.company_name, 
--     SUM(order_details.unit_price * order_details.quantity * (1.0 - order_details.discount)) AS total,
--     NTILE(5) OVER (ORDER BY SUM(order_details.unit_price * order_details.quantity * (1.0 - order_details.discount)) DESC) AS group_number
-- FROM 
--     customers
-- INNER JOIN 
--     orders ON customers.customer_id = orders.customer_id
-- INNER JOIN 
--     order_details ON order_details.order_id = orders.order_id
-- GROUP BY 
--     customers.company_name
-- ORDER BY 
--     total DESC
-- )

-- SELECT *
-- FROM clientes_para_marketing
-- WHERE group_number >= 3;

-- Top 10 produtos mais vendidos
-- SELECT 
--     products.product_name, 
--     SUM(order_details.quantity) AS total_vendas,
--     SUM(order_details.quantity * order_details.unit_price * (1.0 - order_details.discount)) AS total_receita,
--     RANK() OVER (ORDER BY SUM(order_details.quantity) DESC) AS rank,
--     RANK() OVER (ORDER BY SUM(order_details.quantity * order_details.unit_price * (1.0 - order_details.discount)) DESC) AS rank_receita
-- FROM order_details
-- INNER JOIN products ON order_details.product_id = products.product_id
-- GROUP BY products.product_name
-- ORDER BY total_vendas DESC


-- Clientes do Reino Unido que pagaram mais de U$1000.00.
-- SELECT 
--     customers.company_name, 
--     customers.contact_name, 
--     SUM(order_details.unit_price * order_details.quantity * (1.0 - order_details.discount)) AS total,
--     customers.country
-- FROM customers
-- INNER JOIN orders ON customers.customer_id = orders.customer_id
-- INNER JOIN order_details ON order_details.order_id = orders.order_id
-- WHERE customers.country = 'UK'
-- GROUP BY customers.company_name, customers.contact_name, customers.country
-- HAVING SUM(order_details.unit_price * order_details.quantity * (1.0 - order_details.discount)) > 1000
-- ORDER BY total DESC